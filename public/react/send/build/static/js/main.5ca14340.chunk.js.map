{"version":3,"sources":["context/AccountContext.js","context/TransactionContext.js","components/send/Send.js","services/AccountSession.js","services/TransactionSession.js","App.js","serviceWorker.js","index.js"],"names":["AccountDefaults","accountDetails","account","debits","credits","total","progress","AccountContext","React","createContext","TransactionDefaults","transactions","TransactionContext","Account","props","toggle","modalType","console","log","setState","state","balance","modal_send","modal_confirm","modal_request","modal_complete","modal_failure","send_info","amount","mnemonic","request_info","complete_info","transactionHash","transactionValue","failure_info","error","selected","handleSendAmountChange","bind","handleMnemonicChange","sendTokens","event","this","target","value","preventDefault","transaction","AvertemTransaction","AvertemKey","context","fetch","method","body","getProtoTransBuffer","mode","headers","authSession","window","_send_wpnonce","rejectUnauthorized","then","result","status","transactionHashValue","toString","catch","statusText","Form","Card","CardBody","Consumer","transactionList","length","map","FormGroup","Label","for","allowNew","id","newSelectionPrefix","options","placeholder","onChange","s","InputGroup","InputGroupAddon","addonType","Input","type","name","required","CardFooter","Button","color","onClick","Modal","isOpen","className","ModalHeader","ModalBody","FormText","ListGroup","ListGroupItem","ListGroupItemHeading","ListGroupItemText","ModalFooter","Spinner","Component","contextType","AccountSession","getAccount","json","items","JSON","parse","data","parseInt","Provider","children","TransactionSession","getTransactions","App","Container","Send","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5ca14340.chunk.js","sourcesContent":["import React from 'react';\n\nexport const AccountDefaults = {\n    accountDetails: {\n        account: \"\",\n        debits: 0,\n        credits: 0,\n        total: 0,\n        progress: 0}\n}\n\nexport const AccountContext = React.createContext({\n    accountDetails:AccountDefaults.accountDetails,\n  });","import React from 'react';\n\nexport const TransactionDefaults = {\n  transactions: []\n}\n\nexport const TransactionContext = React.createContext({\n  transactions: TransactionDefaults.transactions\n  });","import React, { Component } from 'react';\nimport { \n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  Badge,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Col,\n  Row,\n  Collapse,\n  Fade,\n  Progress,\n  Form,\n  FormGroup,\n  FormText,\n  FormFeedback,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupButtonDropdown,\n  InputGroupText,\n  Label,\n  Button,\n  CardTitle,\n  Spinner,\n  ListGroup,\n  ListGroupItem,\n  ListGroupItemHeading,\n  ListGroupItemText} from 'reactstrap';\n\nimport {Typeahead} from 'react-bootstrap-typeahead';\n\nimport { AvertemTransaction, AvertemKey } from 'avertem-js-utils';\nimport { AccountContext } from '../../context/AccountContext';\nimport { TransactionContext } from '../../context/TransactionContext';\n\nclass Account extends Component {\n\n    static contextType = AccountContext;\n\n    constructor(props) {\n        super(props);\n\n        \n        this.state = {\n            balance: 0,\n            modal_send: false,\n            modal_confirm: true,\n            modal_request: false,\n            modal_complete: false,\n            modal_failure: false,\n            send_info: {\n                amount: 0,\n                mnemonic: '',\n            },\n            request_info: {\n\n            },\n            complete_info: {\n                transactionHash: '',\n                transactionValue: 0\n            },\n            failure_info: {\n                transactionHash: '',\n                transactionValue: 0,\n                error: ''\n            },\n            selected: []\n        };\n\n        this.handleSendAmountChange = this.handleSendAmountChange.bind(this);\n        this.handleMnemonicChange = this.handleMnemonicChange.bind(this);\n        this.sendTokens = this.sendTokens.bind(this);\n    }\n\n    toggle = modalType => () => {\n        console.log(\"Toggle the modal stuff \" + modalType)\n        this.setState({\n            [`modal_${modalType}`]: !this.state[`modal_${modalType}`],\n            modal_confirm: true,\n            modal_request: false,\n            modal_complete: false,\n            modal_failure: false\n        });\n    };\n\n    handleSendAmountChange(event) {\n        let send_info = this.state.send_info;\n        send_info.amount = event.target.value\n        this.setState({ send_info: send_info});\n    }\n\n    handleMnemonicChange(event) {\n        let send_info = this.state.send_info;\n        send_info.mnemonic = event.target.value\n        this.setState({ send_info: send_info});\n    }\n\n    async sendTokens(event) {\n        console.log(\"Selected : [%o]\",this.state.selected )\n        event.preventDefault();\n        let transaction = new AvertemTransaction(new AvertemKey(this.state.send_info.mnemonic),\n            this.state.send_info.amount,this.context.accountDetails.account,this.context.accountDetails.account,\n            this.state.selected[0])\n        let vm = this;\n        this.setState({\n            modal_confirm: false,\n            modal_request: true,\n            modal_complete: false\n        });\n        \n        fetch(`/wp-json/avertem/v1/transaction/send`, {\n            method: 'POST',\n            body: transaction.getProtoTransBuffer(),\n            mode : 'cors',  \n            headers: { \n                'Content-Type': 'application/protobuf',\n                'session_hash': this.authSession,\n                'Access-Control-Allow-Origin' : '*',\n                'X-WP-Nonce': window._send_wpnonce\n            },\n            rejectUnauthorized: false\n        }).then(result=> {\n            console.log(\"After sending the result is %o\",result)\n            if (result.status == 200) {\n                this.setState({\n                    modal_confirm: false,\n                    modal_request: false,\n                    modal_complete: true,\n                    complete_info: {\n                        transactionHash: transaction.transactionHashValue.toString(\"hex\"),\n                        transactionValue: this.state.send_info.amount\n                    }\n                });\n            }\n        }).catch(result=> {\n            console.log(\"Failed to send the transaction %s\", result.statusText);\n        })\n      }\n    \n    \n    \n    render() {\n        const { selected } = this.state;\n\n        return (\n            <Form>\n                <Card>\n                    <CardBody>\n                        <TransactionContext.Consumer>\n                            { (transactions) => {\n                                let transactionList = [];\n                                console.log(\"The retrieve transactions [%o]\",transactions);\n                                if (transactions.transactions.length) {\n                                    transactionList = transactions.transactions.map( (transaction) => {return transaction.account} );\n                                }\n                                console.log(\"Transaction list [%o]\",transactionList);\n                                return (\n                                    <FormGroup>\n                        \n                                        <Label for=\"sendAccountNumber\">Target Account Number</Label>\n                                        <Typeahead\n                                            allowNew\n                                            id=\"sendAccountNumber\"\n                                            newSelectionPrefix=\"Enter new account : \"\n                                            options={ transactionList }\n                                            placeholder=\"Account Number\"\n                                            onChange={(s) => this.setState({ selected: s })}\n                                        />\n                                    </FormGroup>\n                        \n                                )}\n                            } \n                        </TransactionContext.Consumer>                          \n                        <FormGroup>\n                            <Label for=\"sendAmount\">Number({ this.context.accountDetails.total })</Label>\n                            <InputGroup>\n                            <InputGroupAddon addonType=\"prepend\">AVT</InputGroupAddon>\n                            <Input\n                                type=\"number\"\n                                name=\"sendAmount\"\n                                id=\"sendAmount\"\n                                placeholder=\"0\"\n                                required={true}\n                                onChange={this.handleSendAmountChange}\n                                value={this.state.send_info.amount}\n                            />\n                            </InputGroup>\n                        </FormGroup>          \n                    </CardBody>\n                    <CardFooter>\n                        <Button color=\"primary\" onClick={this.toggle('send')}>\n                            Send\n                        </Button>\n                        <Modal\n                            isOpen={this.state.modal_send}\n                            toggle={this.toggle('send')}\n                            className={this.props.className}>\n                            <ModalHeader toggle={this.toggle('send')}>Confirm Send {this.state.send_info.value}</ModalHeader>\n                            { this.state.modal_confirm && \n                            <ModalBody>\n                                <FormGroup>\n                                    <Label for=\"mnemonic\">Mnemonic Phrase</Label>\n                                    <Input \n                                        type=\"textarea\" \n                                        name=\"mnemonic\"\n                                        value={this.state.send_info.mnemonic}\n                                        onChange={this.handleMnemonicChange}\n                                        required={true}>Mnemonic Phrase</Input>\n                                        <FormText color=\"muted\">\n                                            Please provide your mnemonic phrase for confirmation.\n                                        </FormText>\n                                </FormGroup>    \n                            </ModalBody>\n                            }\n                            { this.state.modal_complete && \n                            <ModalBody>\n                                <ListGroup>\n                                    <ListGroupItem>\n                                        <ListGroupItemHeading>Transaction</ListGroupItemHeading>\n                                        <ListGroupItemText>\n                                        {this.state.complete_info.transactionHash}\n                                        </ListGroupItemText>\n                                    </ListGroupItem>\n                                    <ListGroupItem>\n                                        <ListGroupItemHeading>Amount</ListGroupItemHeading>\n                                        <ListGroupItemText>\n                                        {this.state.complete_info.transactionValue}\n                                        </ListGroupItemText>\n                                    </ListGroupItem>\n                                </ListGroup>\n                            </ModalBody>\n                            }\n                            { this.state.modal_failure && \n                            <ModalBody>\n                                <ListGroup>\n                                    <ListGroupItem>\n                                        <ListGroupItemHeading>Transaction</ListGroupItemHeading>\n                                        <ListGroupItemText>\n                                        {this.state.failure_info.transactionHash}\n                                        </ListGroupItemText>\n                                    </ListGroupItem>\n                                    <ListGroupItem>\n                                        <ListGroupItemHeading>Amount</ListGroupItemHeading>\n                                        <ListGroupItemText>\n                                        {this.state.failure_info.transactionValue}\n                                        </ListGroupItemText>\n                                    </ListGroupItem>\n                                    <ListGroupItem>\n                                        <ListGroupItemHeading>Error</ListGroupItemHeading>\n                                        <ListGroupItemText>\n                                        {this.state.failure_info.transactionValue}\n                                        </ListGroupItemText>\n                                    </ListGroupItem>\n                                </ListGroup>\n                            </ModalBody>\n                            }\n                            <ModalFooter>\n                                { this.state.modal_confirm &&\n                                <div>\n                                    <Button color=\"primary\" onClick={this.sendTokens}>\n                                        Send\n                                    </Button>{' '}\n                                    <Button color=\"secondary\" onClick={this.toggle('send')}>\n                                        Cancel\n                                    </Button>\n                                </div>\n                                }\n                                { this.state.modal_request && \n                                <div>\n                                    <ModalBody>\n                                        <Spinner color=\"dark\" />\n                                    </ModalBody>\n                                </div>\n                                }\n                                { (this.state.modal_complete && this.state.modal_failure)  &&\n                                <div>\n                                    <Button color=\"secondary\" onClick={this.toggle('send')}>\n                                        Close\n                                    </Button>\n                                </div>\n                                }\n                            </ModalFooter>\n                        </Modal>\n                    </CardFooter>\n                </Card>\n            </Form>\n                \n        );\n    }\n}\n\nexport default Account;\n","import React from 'react';\nimport {AccountContext, AccountDefaults} from '../context/AccountContext';\n\n\nexport class AccountSession extends React.Component {\n    \n    constructor(props) {\n        super(props)\n\n        this.state = {\n            accountDetails:AccountDefaults.accountDetails\n        }\n    }\n\n    componentDidMount() {\n      this.getAccount();\n      //this.timer = setInterval(()=> this.getAccount(), 1000*60);\n    }\n\n    getAccount() {\n      fetch(`/wp-json/avertem/v1/account/info`,{\n          method: 'GET',\n          mode : 'cors',  \n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',                  \n            'Access-Control-Allow-Origin' : '*',\n            'X-WP-Nonce': window._send_wpnonce\n          }\n        })\n          .then(result=>{\n            if (result.status == 200) {\n              return result.json();\n            } else {\n                console.log(\"Failed to process request [%o]\",result);\n            }\n          })\n          .then(items=>{\n            if (items) {\n              console.log(\"error [%o]\",items);\n              let json = JSON.parse(items)\n              console.log(json)\n              this.setState({accountDetails:{\n                account: json.account,\n                debits: json.data.debits,\n                credits: json.data.credits, \n                total: json.data.total,\n                progress: ((parseInt(json.data.debits) / parseInt(json.data.credits)) * 100)\n              }});\n            }\n          }).catch(error=>{\n            console.log(error);\n          })\n    }\n\n    render() {\n\n        return (\n          <AccountContext.Provider value={this.state}>\n             {this.props.children}\n          </AccountContext.Provider>\n        );\n    }\n}\n\n\nexport default AccountSession;","import React from 'react';\nimport {TransactionContext, TransactionDefaults} from '../context/TransactionContext';\n\n\nexport class TransactionSession extends React.Component {\n    \n    constructor(props) {\n        super(props)\n        this.authSession = props.authSession;\n        this.state = {\n            transactions: TransactionDefaults.transactions\n        }\n    }\n\n    componentDidMount() {\n      this.getTransactions();\n      //this.timer = setInterval(()=> this.getTransactions(), 1000*30);\n        \n    }\n\n    getTransactions() {\n      fetch(`/wp-json/avertem/v1/account/transactions`,{\n          method: 'GET',\n          mode : 'cors',  \n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',                  \n            'Access-Control-Allow-Origin' : '*',\n            'X-WP-Nonce': window._send_wpnonce\n          }\n        })\n          .then(result=>{\n            if (result.status == 200) {\n              return result.json();\n            } else {\n                console.log(\"Failed to process request [%o]\",result);\n            }\n          })\n          .then(items=>{\n            if (items) {\n              console.log(\"error [%o]\",items);\n              let json = JSON.parse(items)\n              console.log(json)\n              this.setState({transactions:(json.data ? json.data : [])})\n            }\n          }).catch(error=>{\n            console.log(error);\n          })\n    }\n\n    render() {\n\n        return (\n          <TransactionContext.Provider value={this.state}>\n             {this.props.children}\n          </TransactionContext.Provider>\n        );\n    }\n}\n\n\nexport default TransactionSession;","import React from 'react';\nimport cx from 'classnames'\n//import './App.css';\n\nimport {\n Container\n} from 'reactstrap';\n\nimport {Send} from './components';\nimport {AccountSession} from './services/AccountSession';\nimport {TransactionSession} from './services/TransactionSession';\n\nfunction App() {  \n  return (\n    <AccountSession>\n      <TransactionSession>\n        <Container>\n          <Send></Send>\n        </Container>\n      </TransactionSession>\n    </AccountSession>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';  \nimport ReactDOM from 'react-dom';\n\nimport cx from 'classnames'\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('avertem_send_id'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}