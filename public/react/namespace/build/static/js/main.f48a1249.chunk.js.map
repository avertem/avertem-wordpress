{"version":3,"sources":["context/AccountContext.js","components/namespace/Namespace.js","services/AccountSession.js","App.js","serviceWorker.js","index.js"],"names":["AccountDefaults","accountDetails","account","debits","credits","total","progress","AccountContext","React","createContext","sha256","require","Buffer","Namespace","props","toggle","modalType","console","log","setState","state","modal_send","modal_confirm","modal_request","modal_complete","modal_failure","namespace_info","name","hash","type","mnemonic","request_info","complete_info","transactionHash","transactionValue","failure_info","error","handleNameChange","bind","handleHashChange","handleTypeChange","handleMnemonicChange","sendNamespace","event","this","target","value","create","update","hashBuffer","arrayBuffer","toString","preventDefault","transaction","AvertemTransaction","AvertemKey","context","contract","contractName","model","subjects","subject","predicates","predicate","objects","dataType","fetch","method","body","getProtoTransBuffer","mode","headers","authSession","window","_namespace_wpnonce","rejectUnauthorized","then","result","status","transactionHashValue","FEE","catch","statusText","Form","Card","CardBody","FormGroup","Label","for","Input","onChange","required","CardFooter","Button","color","onClick","Modal","isOpen","className","ModalHeader","namespaceName","ModalBody","FormText","ListGroup","ListGroupItem","ListGroupItemHeading","ListGroupItemText","ModalFooter","Spinner","Component","contextType","AccountSession","getAccount","json","items","JSON","parse","data","parseInt","Provider","children","App","Container","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f48a1249.chunk.js","sourcesContent":["import React from 'react';\n\nexport const AccountDefaults = {\n    accountDetails: {\n        account: \"\",\n        debits: 0,\n        credits: 0,\n        total: 0,\n        progress: 0}\n}\n\nexport const AccountContext = React.createContext({\n    accountDetails:AccountDefaults.accountDetails,\n  });","import React, { Component } from 'react';\nimport { \n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  Badge,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Col,\n  Row,\n  Collapse,\n  Fade,\n  Progress,\n  Form,\n  FormGroup,\n  FormText,\n  FormFeedback,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupButtonDropdown,\n  InputGroupText,\n  ListGroup,\n  ListGroupItem,\n  ListGroupItemHeading,\n  ListGroupItemText,\n  Label,\n  Button,\n  Spinner,\n  CardTitle} from 'reactstrap';\n\nimport { AvertemTransaction, AvertemKey } from 'avertem-js-utils';\nimport { AccountContext } from '../../context/AccountContext';\n\nvar sha256 = require('js-sha256').sha256;\nvar Buffer = require('buffer/').Buffer\n\n\nconst FEE = 20;\n\nclass Namespace extends Component {\n\n    static contextType = AccountContext;\n\n    constructor(props) {\n        super(props);\n\n        \n        this.state = {\n            modal_send: false,\n            modal_confirm: true,\n            modal_request: false,\n            modal_complete: false,\n            modal_failure: false,\n            namespace_info: {\n                name: '',\n                hash: '',\n                type: 'contract',\n                mnemonic: ''\n            },\n            request_info: {\n\n            },\n            complete_info: {\n                transactionHash: '',\n                transactionValue: 0\n            },\n            failure_info: {\n                transactionHash: '',\n                transactionValue: 0,\n                error: ''\n            }\n        };\n\n        this.handleNameChange = this.handleNameChange.bind(this);\n        this.handleHashChange = this.handleHashChange.bind(this);\n        this.handleTypeChange = this.handleTypeChange.bind(this);\n        this.handleMnemonicChange = this.handleMnemonicChange.bind(this);\n        this.sendNamespace = this.sendNamespace.bind(this);\n    }\n\n    toggle = modalType => () => {\n        console.log(\"Toggle the modal stuff \" + modalType)\n        this.setState({\n            [`modal_${modalType}`]: !this.state[`modal_${modalType}`],\n            modal_confirm: true,\n            modal_request: false,\n            modal_complete: false,\n            modal_failure: false\n        });\n    };\n\n    handleNameChange(event) {\n        let namespace_info = this.state.namespace_info;\n        namespace_info.name = event.target.value\n        \n        let hash = sha256.create();\n        hash.update(namespace_info.name);\n        let hashBuffer = new Buffer(hash.arrayBuffer())\n        namespace_info.hash = hashBuffer.toString(\"hex\");\n        \n        this.setState({ namespace_info: namespace_info});\n    }\n\n    handleHashChange(event) {\n        let namespace_info = this.state.namespace_info;\n        namespace_info.hash = event.target.value\n        this.setState({ namespace_info: namespace_info});\n    }\n\n    handleTypeChange(event) {\n        console.log(\"The event [%o]\",event.target.value)\n        let namespace_info = this.state.namespace_info;\n        namespace_info.type = event.target.value\n        this.setState({ namespace_info: namespace_info});\n    }\n\n    handleMnemonicChange(event) {\n        let namespace_info = this.state.namespace_info;\n        namespace_info.mnemonic = event.target.value\n        this.setState({ namespace_info: namespace_info});\n    }\n\n    \n    async sendNamespace(event) {\n        console.log(\"Selected : [%o]\",this.state.namespace_info )\n        event.preventDefault();\n        let transaction = new AvertemTransaction(new AvertemKey(this.state.namespace_info.mnemonic),\n            FEE,this.context.accountDetails.account,this.context.accountDetails.account,\n            'D594F22DC389E38B3DE7FA5630DBD9DCA16DA8A77097516FD37F9E25C6BE24D2',\n            {\n                contract: '9B37273E25CA8476B2B78FDC6305579BDF046547B354C8EBB1D2C29ECF02795E',\n                contractName: 'avertem__namespace_management_contract',\n                model:{subjects :[\n                    {\n                        subject: 'http://keto-coin.io/schema/rdf/1.0/keto/Namespace#Namespace/' + this.state.namespace_info.hash,\n                        predicates: [\n                            {\n                                predicate: 'http://keto-coin.io/schema/rdf/1.0/keto/Namespace#id',\n                                objects:[{\n                                    value: this.state.namespace_info.hash,\n                                    dataType: 'http://www.w3.org/2001/XMLSchema#string'\n                                    }\n                                ]\n                            },\n                            {\n                                predicate: 'http://keto-coin.io/schema/rdf/1.0/keto/Namespace#hash',\n                                objects:[{\n                                    value: this.state.namespace_info.hash,\n                                    dataType: 'http://www.w3.org/2001/XMLSchema#string'\n                                    }\n                                ]\n                            },\n                            {\n                                predicate: 'http://keto-coin.io/schema/rdf/1.0/keto/Namespace#accountHash',\n                                objects:[{\n                                    value: this.context.accountDetails.account,\n                                    dataType: 'http://www.w3.org/2001/XMLSchema#string'\n                                    }\n                                ]\n                            },\n                            {\n                                predicate: 'http://keto-coin.io/schema/rdf/1.0/keto/Namespace#namespace',\n                                objects:[{\n                                    value: this.state.namespace_info.name,\n                                    dataType: 'http://www.w3.org/2001/XMLSchema#string'\n                                    }\n                                ]\n                            },\n                            {\n                                predicate: 'http://keto-coin.io/schema/rdf/1.0/keto/Namespace#type',\n                                objects:[{\n                                    value: this.state.namespace_info.type,\n                                    dataType: 'http://www.w3.org/2001/XMLSchema#string'\n                                    }\n                                ]\n                            },\n                            {\n                                predicate: 'http://keto-coin.io/schema/rdf/1.0/keto/AccountModifier#accountModifier',\n                                objects:[{\n                                    value: 'PUBLIC',\n                                    dataType: 'http://www.w3.org/2001/XMLSchema#string'\n                                    }\n                                ]\n                            }\n                        ]\n                    }\n                ]}\n            });\n        \n        let vm = this;\n        this.setState({\n            modal_confirm: false,\n            modal_request: true,\n            modal_complete: false,\n            \n        });\n        \n        fetch(`/wp-json/avertem/v1/transaction/send`, {\n            method: 'POST',\n            body: transaction.getProtoTransBuffer(),\n            mode : 'cors',  \n            headers: { \n                'Content-Type': 'application/protobuf',\n                'session_hash': this.authSession,\n                'Access-Control-Allow-Origin' : '*',\n                'X-WP-Nonce': window._namespace_wpnonce\n            },\n            rejectUnauthorized: false\n        }).then(result=> {\n            console.log(\"After sending the result is %o\",result)\n            if (result.status == 200) {\n                console.log(\"Update the status %o\",result)\n                this.setState({\n                    modal_confirm: false,\n                    modal_request: false,\n                    modal_complete: true,\n                    complete_info: {\n                        transactionHash: transaction.transactionHashValue.toString(\"hex\"),\n                        transactionValue: (FEE + 10000)\n                    }\n                });\n            }\n        }).catch(result=> {\n            console.log(\"Failed to send the transaction %s\", result.statusText);\n        })\n      }\n\n    render() {\n        return (\n            <Form>\n                <Card>\n                    <CardBody>\n                        <FormGroup>\n                            <Label for=\"name\">Name</Label>\n                            <Input \n                                type=\"text\" \n                                name=\"name\"\n                                value={this.state.namespace_info.name}\n                                onChange={this.handleNameChange}\n                                required={true}>Name</Input>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"hash\">Hash</Label>\n                            <Input \n                                type=\"text\" \n                                name=\"hash\"\n                                value={this.state.namespace_info.hash}\n                                onChange={this.handleHashChange}\n                                required={true}>Hash</Input>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"type\">Type</Label>\n                            <Input \n                                type=\"select\" \n                                name=\"type\"\n                                value={this.state.namespace_info.type}\n                                onChange={this.handleTypeChange}\n                                required={true}>Type\n                                <option value={'contract'}>Contract</option>\n                                <option value={'rdf'}>RDF</option>\n                            </Input>\n                        </FormGroup>\n                        \n                    </CardBody>\n                    <CardFooter>\n                        <Button color=\"primary\" onClick={this.toggle('send')}>\n                            Send\n                        </Button>\n                        <Modal\n                            isOpen={this.state.modal_send}\n                            toggle={this.toggle('send')}\n                            className={this.props.className}>\n                            <ModalHeader toggle={this.toggle('send')}>Confirm Send {this.state.namespace_info.namespaceName}</ModalHeader>\n                            { this.state.modal_confirm && \n                            <ModalBody>\n                                <FormGroup>\n                                    <Label for=\"mnemonic\">Mnemonic Phrase</Label>\n                                    <Input \n                                        type=\"textarea\" \n                                        name=\"mnemonic\"\n                                        value={this.state.namespace_info.mnemonic}\n                                        onChange={this.handleMnemonicChange}\n                                        required={true}>Mnemonic Phrase</Input>\n                                        <FormText color=\"muted\">\n                                            Please provide your mnemonic phrase for confirmation.\n                                        </FormText>\n                                </FormGroup>    \n                            </ModalBody>\n                            }\n                            { this.state.modal_complete && \n                            <ModalBody>\n                                <ListGroup>\n                                    <ListGroupItem>\n                                        <ListGroupItemHeading>Transaction</ListGroupItemHeading>\n                                        <ListGroupItemText>\n                                        {this.state.complete_info.transactionHash}\n                                        </ListGroupItemText>\n                                    </ListGroupItem>\n                                    <ListGroupItem>\n                                        <ListGroupItemHeading>Amount</ListGroupItemHeading>\n                                        <ListGroupItemText>\n                                        {this.state.complete_info.transactionValue}\n                                        </ListGroupItemText>\n                                    </ListGroupItem>\n                                </ListGroup>\n                            </ModalBody>\n                            }\n                            { this.state.modal_failure && \n                            <ModalBody>\n                                <ListGroup>\n                                    <ListGroupItem>\n                                        <ListGroupItemHeading>Transaction</ListGroupItemHeading>\n                                        <ListGroupItemText>\n                                        {this.state.failure_info.transactionHash}\n                                        </ListGroupItemText>\n                                    </ListGroupItem>\n                                    <ListGroupItem>\n                                        <ListGroupItemHeading>Amount</ListGroupItemHeading>\n                                        <ListGroupItemText>\n                                        {this.state.failure_info.transactionValue}\n                                        </ListGroupItemText>\n                                    </ListGroupItem>\n                                    <ListGroupItem>\n                                        <ListGroupItemHeading>Error</ListGroupItemHeading>\n                                        <ListGroupItemText>\n                                        {this.state.failure_info.transactionValue}\n                                        </ListGroupItemText>\n                                    </ListGroupItem>\n                                </ListGroup>\n                            </ModalBody>\n                            }   \n                            <ModalFooter>\n                                { this.state.modal_confirm &&\n                                <div>\n                                    <Button color=\"primary\" onClick={this.sendNamespace}>\n                                        Send\n                                    </Button>{' '}\n                                    <Button color=\"secondary\" onClick={this.toggle('send')}>\n                                        Cancel\n                                    </Button>\n                                </div>\n                                }\n                                { this.state.modal_request && \n                                <div>\n                                    <ModalBody>\n                                        <Spinner color=\"dark\" />\n                                    </ModalBody>\n                                </div>\n                                }\n                                { (this.state.modal_complete && this.state.modal_failure)  &&\n                                <div>\n                                    <Button color=\"secondary\" onClick={this.toggle('send')}>\n                                        Close\n                                    </Button>\n                                </div>\n                                }\n                            </ModalFooter>\n                        </Modal>\n                    </CardFooter>\n                </Card>\n            </Form>\n            \n        );\n    }\n}\n\nexport default Namespace;\n","import React from 'react';\nimport {AccountContext, AccountDefaults} from '../context/AccountContext';\n\n\nexport class AccountSession extends React.Component {\n    \n    constructor(props) {\n        super(props)\n\n        this.state = {\n            accountDetails:AccountDefaults.accountDetails\n        }\n    }\n\n    componentDidMount() {\n      this.getAccount();\n      //this.timer = setInterval(()=> this.getAccount(), 1000*60);\n    }\n\n    getAccount() {\n      fetch(`/wp-json/avertem/v1/account/info`,{\n          method: 'GET',\n          mode : 'cors',  \n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',                  \n            'Access-Control-Allow-Origin' : '*',\n            'X-WP-Nonce': window._namespace_wpnonce\n          }\n        })\n          .then(result=>{\n            if (result.status == 200) {\n              return result.json();\n            } else {\n                console.log(\"Failed to process request [%o]\",result);\n            }\n          })\n          .then(items=>{\n            if (items) {\n              console.log(\"error [%o]\",items);\n              let json = JSON.parse(items)\n              console.log(json)\n              this.setState({accountDetails:{\n                account: json.account,\n                debits: json.data.debits,\n                credits: json.data.credits, \n                total: json.data.total,\n                progress: ((parseInt(json.data.debits) / parseInt(json.data.credits)) * 100)\n              }});\n            }\n          }).catch(error=>{\n            console.log(error);\n          })\n    }\n\n    render() {\n\n        return (\n          <AccountContext.Provider value={this.state}>\n             {this.props.children}\n          </AccountContext.Provider>\n        );\n    }\n}\n\n\nexport default AccountSession;","import React from 'react';\n//import logo from './logo.svg';\n//import './App.css';\n\nimport {\n  Container\n} from 'reactstrap';\n\nimport {Namespace} from './components';\nimport {AccountSession} from './services/AccountSession';\n\nfunction App() {  \n  return (\n    <AccountSession>\n      <Container>\n        <Namespace></Namespace>\n      </Container>\n    </AccountSession>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';  \nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('avertem_namespace_id'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}