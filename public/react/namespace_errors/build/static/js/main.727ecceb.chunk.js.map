{"version":3,"sources":["context/NamespaceErrorsContext.js","services/NamespaceErrorsSession.js","components/namespace_errors/NamespaceErrors.js","App.js","serviceWorker.js","index.js"],"names":["NamespaceErrorsDefaults","namespace_errors","NamespaceErrorsContext","React","createContext","NamespaceErrorsSession","props","authSession","state","this","getNamespaces","fetch","method","mode","headers","window","_namespace_errors_wpnonce","then","result","status","json","console","log","items","JSON","parse","setState","namespaces","data","catch","error","Provider","value","children","Component","NamespaceErrors","columns","name","selector","sortable","right","context","noHeader","fixedHeaderScrollHeight","contextType","App","Container","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wRAEaA,EAA0B,CACrCC,iBAAkB,IAGPC,EAAyBC,IAAMC,cAAc,CACxDH,iBAAkBD,EAAwBC,mBCH/BI,EAAb,YAEI,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,YAAcD,EAAMC,YACzB,EAAKC,MAAQ,CACTP,iBAAkBD,EAAwBC,kBAJ/B,EAFvB,iFAWMQ,KAAKC,kBAXX,sCAgBqB,IAAD,OACdC,MAAM,iDAAiD,CACnDC,OAAQ,MACRC,KAAO,OACPC,QAAS,CACP,eAAgB,mBAChB,OAAU,mBACV,8BAAgC,IAChC,aAAcC,OAAOC,6BAGtBC,MAAK,SAAAC,GACJ,GAAqB,KAAjBA,EAAOC,OACT,OAAOD,EAAOE,OAEZC,QAAQC,IAAI,iCAAiCJ,MAGlDD,MAAK,SAAAM,GACJ,GAAIA,EAAO,CACTF,QAAQC,IAAI,aAAaC,GACzB,IAAIH,EAAOI,KAAKC,MAAMF,GACtBF,QAAQC,IAAIF,GACZ,EAAKM,SAAS,CAACC,WAAYP,EAAKQ,KAAOR,EAAKQ,KAAO,SAEpDC,OAAM,SAAAC,GACPT,QAAQC,IAAIQ,QA1CxB,+BAgDQ,OACE,kBAAC5B,EAAuB6B,SAAxB,CAAiCC,MAAOvB,KAAKD,OACzCC,KAAKH,MAAM2B,cAlDzB,GAA4C9B,IAAM+B,W,iBC2B5CC,E,YAIJ,WAAY7B,GAAQ,IAAD,8BACjB,4CAAMA,KAEDE,MAAQ,GAyCb,EAAK4B,QAAU,CACb,CACEC,KAAM,KACNC,SAAU,KACVC,UAAU,EACVC,OAAO,GAET,CACEH,KAAM,MACNC,SAAU,MACVC,UAAU,EACVC,OAAO,IAvDM,E,sEA6DjB,OACM,kBAAC,IAAD,CACEZ,KAAMnB,KAAKgC,QAAQxC,iBACnBmC,QAAS3B,KAAK2B,QACdM,UAAQ,EACRC,wBAAwB,c,GAtENT,aAAxBC,EAEGS,YAAc1C,EA0ERiC,QCvFAU,MAVf,WACE,OACE,kBAAC,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,SCFYC,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,gCD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEd9B,OAAM,SAAAC,GACLT,QAAQS,MAAMA,EAAM8B,c","file":"static/js/main.727ecceb.chunk.js","sourcesContent":["import React from 'react';\n\nexport const NamespaceErrorsDefaults = {\n  namespace_errors: []\n}\n\nexport const NamespaceErrorsContext = React.createContext({\n  namespace_errors: NamespaceErrorsDefaults.namespace_errors\n  });","import React from 'react';\nimport {NamespaceErrorsContext, NamespaceErrorsDefaults} from '../context/NamespaceErrorsContext';\n\n\nexport class NamespaceErrorsSession extends React.Component {\n    \n    constructor(props) {\n        super(props)\n        this.authSession = props.authSession;\n        this.state = {\n            namespace_errors: NamespaceErrorsDefaults.namespace_errors\n        }\n    }\n\n    componentDidMount() {\n      this.getNamespaces();\n      //this.timer = setInterval(()=> this.getTransactions(), 1000*30);\n        \n    }\n\n    getNamespaces() {\n      fetch(`/wp-json/avertem/v1/namespace/namespace_errors`,{\n          method: 'GET',\n          mode : 'cors',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json',                  \n            'Access-Control-Allow-Origin' : '*',\n            'X-WP-Nonce': window._namespace_errors_wpnonce\n          }\n        })\n          .then(result=>{\n            if (result.status == 200) {\n              return result.json();\n            } else {\n                console.log(\"Failed to process request [%o]\",result);\n            }\n          })\n          .then(items=>{\n            if (items) {\n              console.log(\"error [%o]\",items);\n              let json = JSON.parse(items)\n              console.log(json)\n              this.setState({namespaces:(json.data ? json.data : [])})\n            }\n          }).catch(error=>{\n            console.log(error);\n          })\n    }\n\n    render() {\n\n        return (\n          <NamespaceErrorsContext.Provider value={this.state}>\n             {this.props.children}\n          </NamespaceErrorsContext.Provider>\n        );\n    }\n}\n\n\nexport default NamespaceErrorsSession;","import React, { Component } from 'react';\nimport { \n  Badge,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Col,\n  Row,\n  Collapse,\n  Fade,\n  Progress,\n  Form,\n  FormGroup,\n  FormText,\n  FormFeedback,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupButtonDropdown,\n  InputGroupText,\n  Label,\n  Button,\n  Table,\n  Pagination,\n  PaginationItem,\n  PaginationLink} from 'reactstrap';\n\nimport DataTable, { memoize } from 'react-data-table-component'\nimport { NamespaceErrorsContext } from '../../context/NamespaceErrorsContext';\n\nclass NamespaceErrors extends Component {\n\n  static contextType = NamespaceErrorsContext;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      /*collapse: true,\n      fadeIn: true,\n      transactions: [{\n        id: \"6941575F0300277CE7B37372EF50D2C24A72379B0387A99D45BB206B4DD08925\",\n        account: \"6941575F0300277CE7B37372EF50D2C24A72379B0387A99D45BB206B4DD08925\",\n        date: \"2019-12-11T12:17:49\",\n        type: \"debit\",\n        name: \"keto_account_contract\",\n        amount: 23\n      },{\n        id: \"6941575F0300277CE7B37372EF50D2C24A72379B0387A99D45BB206B4DD08925\",\n        account: \"6941575F0300277CE7B37372EF50D2C24A72379B0387A99D45BB206B4DD08925\",\n        date: \"2019-12-11T12:17:49\",\n        type: \"credit\",\n        name: \"keto_account_contract\",\n        amount: 23\n      },{\n        id: \"6941575F0300277CE7B37372EF50D2C24A72379B0387A99D45BB206B4DD08925\",\n        account: \"6941575F0300277CE7B37372EF50D2C24A72379B0387A99D45BB206B4DD08925\",\n        date: \"2019-12-11T12:17:49\",\n        type: \"credit\",\n        name: \"keto_account_contract\",\n        amount: 23\n      },{\n        id: \"6941575F0300277CE7B37372EF50D2C24A72379B0387A99D45BB206B4DD08925\",\n        account: \"6941575F0300277CE7B37372EF50D2C24A72379B0387A99D45BB206B4DD08925\",\n        date: \"2019-12-11T12:17:49\",\n        type: \"credit\",\n        name: \"keto_account_contract\",\n        amount: 23\n      },{\n        id: \"6941575F0300277CE7B37372EF50D2C24A72379B0387A99D45BB206B4DD08925\",\n        account: \"6941575F0300277CE7B37372EF50D2C24A72379B0387A99D45BB206B4DD08925\",\n        date: \"2019-12-11T12:17:49\",\n        type: \"credit\",\n        name: \"keto_account_contract\",\n        amount: 23\n      }]*/\n    };\n\n    this.columns = [\n      {\n        name: 'Id',\n        selector: 'id',\n        sortable: true,\n        right: true,\n      },\n      {\n        name: 'MSG',\n        selector: 'msg',\n        sortable: true,\n        right: true,\n      }\n    ];\n  }\n\n  render() {\n    return (\n          <DataTable\n            data={this.context.namespace_errors}\n            columns={this.columns}\n            noHeader\n            fixedHeaderScrollHeight=\"300px\"\n          />\n    );\n  }\n}\n\nexport default NamespaceErrors;\n","import React from 'react';\n//import logo from './logo.svg';\nimport cx from 'classnames'\n//import './App.css';\n\nimport {Container} from 'reactstrap';\n\nimport {NamespaceErrorsSession} from './services/NamespaceErrorsSession';\nimport {NamespaceErrors} from './components';\n\nfunction App() {  \n  return (\n    <NamespaceErrorsSession>\n      <Container>\n        <NamespaceErrors></NamespaceErrors>\n      </Container>\n    </NamespaceErrorsSession>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';  \nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('avertem_namespace_errors_id'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}