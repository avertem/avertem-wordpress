{"version":3,"sources":["components/contract/Contract.js","App.js","serviceWorker.js","index.js"],"names":["Contract","props","state","contract_info","contractName","contractHash","contractNamespace","contract","mnemonic","handleContractNameChange","bind","handleContractHashChange","handleContractNamespaceChange","handleContractChange","handleMnemonicChange","event","this","target","value","setState","Form","Card","CardBody","FormGroup","Label","for","Input","type","name","onChange","required","FormText","color","CardFooter","Button","onClick","sendContract","Component","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a24c44d0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { \n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  Badge,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Col,\n  Row,\n  Collapse,\n  Fade,\n  Progress,\n  Form,\n  FormGroup,\n  FormText,\n  FormFeedback,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupButtonDropdown,\n  InputGroupText,\n  Label,\n  Button,\n  CardTitle} from 'reactstrap';\n\nclass Contract extends Component {\n\n    constructor(props) {\n        super(props);\n\n        \n        this.state = {\n            contract_info: {\n                contractName: '',\n                contractHash: '',\n                contractNamespace: '',\n                contract: null,\n                mnemonic: ''\n            }\n        };\n\n        this.handleContractNameChange = this.handleContractNameChange.bind(this);\n        this.handleContractHashChange = this.handleContractHashChange.bind(this);\n        this.handleContractNamespaceChange = this.handleContractNamespaceChange.bind(this);\n        this.handleContractChange = this.handleContractChange.bind(this);\n        this.handleMnemonicChange = this.handleMnemonicChange.bind(this);\n    }\n\n    handleContractNameChange(event) {\n        let contract_info = this.state.contract_info;\n        contract_info.contractName = event.target.value\n        this.setState({ contract_info: contract_info});\n    }\n\n    handleContractHashChange(event) {\n        let contract_info = this.state.contract_info;\n        contract_info.contractHash = event.target.value\n        this.setState({ contract_info: contract_info});\n    }\n\n    handleContractNamespaceChange(event) {\n        let contract_info = this.state.contract_info;\n        contract_info.contractNamespace = event.target.value\n        this.setState({ contract_info: contract_info});\n    }\n\n    handleContractChange(event) {\n        let contract_info = this.state.contract_info;\n        contract_info.contract = event.target.value\n        this.setState({ contract_info: contract_info});\n    }\n\n    handleMnemonicChange(event) {\n        let contract_info = this.state.contract_info;\n        contract_info.mnemonic = event.target.value\n        this.setState({ contract_info: contract_info});\n    }\n\n    \n    async sendContract(event) {\n        /*event.preventDefault();\n        let transaction = new Transaction(this.mnemonic,\n            this.state.send_info.amount,this.context.accountDetails.hash,this.context.accountDetails.hash,\n            this.state.send_info.account)\n        let vm = this;\n        \n        fetch(`/keto_api/transaction/${this.authSession}`, {\n            method: 'POST',\n            body: transaction.getProtoTransBuffer(),\n            headers: { \n                'Content-Type': 'application/protobuf',\n                'session_hash': this.authSession},\n            rejectUnauthorized: false\n        }).then(result=> {\n            console.log(\"After sending the result is %o\",result)\n            this.setState({\n                modal_send: false,\n            });\n        }).catch(result=> {\n            console.log(\"Failed to send the transaction %s\", result.statusText);\n        })*/\n      }\n\n    render() {\n        return (\n            <Form>\n                <Card>\n                    <CardBody>\n                        <FormGroup>\n                            <Label for=\"contractName\">Contract Name</Label>\n                            <Input \n                                type=\"text\" \n                                name=\"contractName\"\n                                value={this.state.contract_info.contractName}\n                                onChange={this.handleContractNameChange}\n                                required={true}>Contract Name</Input>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"contractHash\">Contract Hash</Label>\n                            <Input \n                                type=\"text\" \n                                name=\"contractHash\"\n                                value={this.state.contract_info.contractHash}\n                                onChange={this.handleContractHashChange}\n                                required={true}>Contract Hash</Input>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"contractNamespace\">Contract Namespace</Label>\n                            <Input \n                                type=\"text\" \n                                name=\"contractNamespace\"\n                                value={this.state.contract_info.contractNamespace}\n                                onChange={this.handleContractNamespaceChange}\n                                required={true}>Contract Namespace</Input>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"contract\">Contract</Label>\n                            <Input \n                                type=\"file\" \n                                name=\"contract\"\n                                value={this.state.contract_info.contract}\n                                onChange={this.handleContractChange}\n                                required={true}>Contract</Input>\n                                <FormText color=\"muted\">\n                                    The contract file that will stored.\n                                </FormText>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"mnemonic\">Mnemonic Phrase</Label>\n                            <Input \n                                type=\"textarea\" \n                                name=\"mnemonic\"\n                                value={this.state.contract_info.mnemonic}\n                                onChange={this.handleMnemonicChange}\n                                required={true}>Mnemonic Phrase</Input>\n                                <FormText color=\"muted\">\n                                    This is used to sign the contract and is never passed to the server\n                                </FormText>\n                        </FormGroup>\n                    </CardBody>\n                    <CardFooter>\n                        <Button color=\"primary\" onClick={this.sendContract}>\n                            Send\n                        </Button>\n                    </CardFooter>\n                </Card>\n            </Form>\n            \n        );\n    }\n}\n\nexport default Contract;\n","import React from 'react';\n//import logo from './logo.svg';\n//import './App.css';\n\nimport {\n  Container\n} from 'reactstrap';\n\nimport {Contract} from './components';\n\nfunction App() {  \n  return (\n    <Container>\n      <Contract></Contract>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';  \nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('avertem_contract_id'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}